image: ubuntu:22.04

variables: 
  GITVERSION: 'gittools/gitversion:5.10.0-alpine.3.14-6.0'

stages:
  - fetch-all-tags
  - check-base-ref
  # - calculate-changed-services
  # - checkout-to-branch
  # - calculate-service-versions
  # - update-pr-description

before_script:
  - apt update -y && apt install -y --no-install-recommends git ca-certificates

# Fetch all history for all tags and branches
fetch-all-tags:
  stage: fetch-all-tags
  script: git fetch --all && git checkout develop && git checkout main

# Check base ref
check-base-ref:
  stage: check-base-ref
  script: |
    # echo "baseref='$GITHUB_BASE_REF' ref='$GITHUB_REF' headref='$GITHUB_HEAD_REF' refname='$GITHUB_REF_NAME' eventname='$GITHUB_EVENT_NAME'"
    echo "CI_MERGE_REQUEST_SOURCE_BRANCH_NAME='$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME'"
    echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME='$CI_MERGE_REQUEST_TARGET_BRANCH_NAME'"
    echo "CI_COMMIT_BRANCH='$CI_COMMIT_BRANCH'"
    echo "CI_PIPELINE_SOURCE='$CI_PIPELINE_SOURCE'"

# Calculate changed services
# calculate-changed-services:
#   stage: calculate-changed-services
#   script: |
#     if [ "${GITHUB_EVENT_NAME}" = 'push' ]; then
#       DIFF_DEST="${GITHUB_REF_NAME}"
#       DIFF_SOURCE="${DIFF_DEST}~1"
#     else
#       DIFF_DEST="${GITHUB_HEAD_REF}"
#       DIFF_SOURCE="${GITHUB_BASE_REF}"
#     fi
#     changed_services=`git diff "origin/${DIFF_SOURCE}" "origin/${DIFF_DEST}" --name-only | grep -o '^apps/[a-zA-Z-]*' | sort | uniq`
#     changed_services=$(printf '%s' "$changed_services" | jq --raw-input --slurp '.')
#     echo "::set-output name=changed_services::$changed_services"
#     echo "::set-output name=diff_source::$DIFF_SOURCE"
#     echo "::set-output name=diff_dest::$DIFF_DEST"
#     echo "DIFF_SOURCE='$DIFF_SOURCE'"
#     echo "DIFF_DEST='$DIFF_DEST'"
#     echo "changed_services='$(echo "$changed_services" | sed 'N;s/\n/, /g')'"

# # Checkout to branch
# checkout-to-branch:
#   stage: checkout-to-branch
#   script: git checkout ${{ steps.calculate_changed_services.outputs.diff_dest }}

# # Calculate service versions
# calculate-service-versions:
#   stage: calculate-service-versions
#   script: |
#     changed_services=( ${{ fromJSON(steps.calculate_changed_services.outputs.changed_services) }} )
#     if [ "${#changed_services[@]}" = "0" ]; then
#       service_versions_txt='## service changes\nNo services changed\n'
#     else
#       service_versions_txt="## service changes\n"
#       for svc in "${changed_services[@]}"; do
#         echo "calculation for ${svc}"
#         docker run --rm -v "$(pwd):/repo" ${{ env.GITVERSION }} /repo /config "/repo/${svc}/.gitversion.yml"
#         gitversion_calc=$(docker run --rm -v "$(pwd):/repo" ${{ env.GITVERSION }} /repo /config "/repo/${svc}/.gitversion.yml")
#         service_version=$(echo "${gitversion_calc}" | jq -r '.MajorMinorPatch')
#         echo "${gitversion_calc}"
#         service_versions_txt+="- ${svc} - v${service_version}\n"
#       done
#     fi
#     # fix multiline variables
#     # from: https://github.com/actions/create-release/issues/64#issuecomment-638695206
#     PR_BODY="${service_versions_txt}"
#     PR_BODY=$(printf '%s' "$PR_BODY" | jq --raw-input --slurp '.')
#     echo "${PR_BODY}"
#     echo "::set-output name=PR_BODY::$PR_BODY"

# # Update PR description
# update-pr-description:
#   stage: update-pr-description
#   rules:
#   - if: "false" # ${{ github.event_name == 'pull_request' }}
#   script: |
#       PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
#       # from https://github.com/actions/checkout/issues/58#issuecomment-614041550
#       jq -nc '{"body": "${{ fromJSON(steps.calculate_service_versions.outputs.PR_BODY) }}" }' | \
#       curl -sL  -X PATCH -d @- \
#         -H "Content-Type: application/json" \
#         -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#         "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER"
